// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env( "DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid

  name String @db.VarChar
  email String @db.VarChar @unique
  cpf String @db.VarChar @unique
  phone String @db.VarChar
  birhtDate DateTime @db.Timestamptz(6) @map("birht_date")
  description String? @db.VarChar 
  password String @db.VarChar

  isActivate Boolean @db.Boolean @default(false) @map("is_activate")
  accessToken String? @db.VarChar @map("access_token")

  isSeller Boolean @db.Boolean @default(false) @map("is_seller")

  adress Address[]
  victories Announcement[] @relation(name: "UserWinner")
  sales Announcement[] @relation(name: "UserSeller")
  bids Bids[] @relation(name: "UserBids")
  

  @@map("user")
}

model Address {
  id String @id @default(uuid()) @db.Uuid

  zipCode String @db.VarChar
  state String @db.VarChar
  city String @db.VarChar
  street String @db.VarChar
  number Int @db.Integer
  complement String? @db.VarChar 

  userId String @db.Uuid @map("user_id")

  users User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

 @@map("address")
}

model Announcement {
    id String @id @default(uuid()) @db.Uuid

    title String @db.VarChar
    description String @db.VarChar
    year Int @db.Integer
    Km Int @db.Integer
    price Decimal @db.Decimal(20,2)
    isActivate Boolean @db.Boolean @map("is_activate") 

    type typeAnnouncement
    typeVehicle typeVehicle @map("type_vehicle") 

    limitDate DateTime @db.Timestamptz(6) @map("limit_date") 
    publishedData DateTime @default(now()) @map("published_date") 

    winnerId String?  @db.Uuid @map("winner_id") 
    sellerId String  @db.Uuid @map("seller_id")

    winner  User?   @relation(fields: [winnerId], name: "UserWinner", references: [id], onDelete: NoAction, onUpdate: NoAction)
    seller  User   @relation(fields: [sellerId], name: "UserSeller", references: [id], onDelete: NoAction, onUpdate: NoAction)

    images Images[] @relation(name: "AnnouncementImages")
    bids Bids[] @relation(name: "AnnouncementBids")

  @@map("announcement")
}

enum typeAnnouncement {
  auction
  sale
}

enum typeVehicle {
  car
  motocycle
}

model Images {
  id String @id @default(uuid()) @db.Uuid

  fileName String @db.VarChar @map("file_name")

  announcementId String @db.Uuid @map("announcement_id")

  announcement Announcement @relation(fields: [announcementId], name: "AnnouncementImages", references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Bids {
  id String @id @default(uuid()) @db.Uuid

  value Decimal @db.Decimal(20,2)
  date DateTime @default(now())

  announcementId String @db.Uuid @map("announcement_id")
  userId String?  @db.Uuid @map("user_id")

  announcement Announcement @relation(fields: [announcementId], name: "AnnouncementBids", references: [id], onDelete: Cascade, onUpdate: NoAction)
  user  User?   @relation(fields: [userId], name: "UserBids", references: [id], onDelete: Cascade, onUpdate: NoAction)
}